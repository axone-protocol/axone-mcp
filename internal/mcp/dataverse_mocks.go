// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/axone-protocol/axone-sdk/dataverse (interfaces: QueryClient)
//
// Generated by this command:
//
//	mockgen -destination=internal/mcp/dataverse_mocks_test.go -package=mcp github.com/axone-protocol/axone-sdk/dataverse QueryClient
//

// Package mcp is a generated GoMock package.
package mcp

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQueryClient is a mock of QueryClient interface.
type MockQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueryClientMockRecorder
	isgomock struct{}
}

// MockQueryClientMockRecorder is the mock recorder for MockQueryClient.
type MockQueryClientMockRecorder struct {
	mock *MockQueryClient
}

// NewMockQueryClient creates a new mock instance.
func NewMockQueryClient(ctrl *gomock.Controller) *MockQueryClient {
	mock := &MockQueryClient{ctrl: ctrl}
	mock.recorder = &MockQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryClient) EXPECT() *MockQueryClientMockRecorder {
	return m.recorder
}

// AskGovPermittedActions mocks base method.
func (m *MockQueryClient) AskGovPermittedActions(arg0 context.Context, arg1, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskGovPermittedActions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskGovPermittedActions indicates an expected call of AskGovPermittedActions.
func (mr *MockQueryClientMockRecorder) AskGovPermittedActions(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskGovPermittedActions", reflect.TypeOf((*MockQueryClient)(nil).AskGovPermittedActions), arg0, arg1, arg2)
}

// AskGovTellAction mocks base method.
func (m *MockQueryClient) AskGovTellAction(arg0 context.Context, arg1, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskGovTellAction", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskGovTellAction indicates an expected call of AskGovTellAction.
func (mr *MockQueryClientMockRecorder) AskGovTellAction(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskGovTellAction", reflect.TypeOf((*MockQueryClient)(nil).AskGovTellAction), arg0, arg1, arg2, arg3)
}

// GetResourceGovAddr mocks base method.
func (m *MockQueryClient) GetResourceGovAddr(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceGovAddr", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceGovAddr indicates an expected call of GetResourceGovAddr.
func (mr *MockQueryClientMockRecorder) GetResourceGovAddr(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceGovAddr", reflect.TypeOf((*MockQueryClient)(nil).GetResourceGovAddr), arg0, arg1)
}

// GovCode mocks base method.
func (m *MockQueryClient) GovCode(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GovCode", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GovCode indicates an expected call of GovCode.
func (mr *MockQueryClientMockRecorder) GovCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GovCode", reflect.TypeOf((*MockQueryClient)(nil).GovCode), arg0, arg1)
}
